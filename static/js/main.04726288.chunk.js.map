{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","data","setdata","name","setName","setuserName","rank","setRank","skill","setSkill","challenge","setChallenge","text","setText","useEffect","axios","get","then","response","honorNumber","honor","Name","UserName","username","Rank","ranks","overall","Skill","skills","Challenge","codeChallenges","totalCompleted","console","log","catch","error","finally","class","src","className","alt","style","height","type","placeholder","width","borderRadius","onChange","event","target","value","align","onClick","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"qSAgGeA,MA3Ff,WAAgB,IAAD,EACWC,mBAAS,IADpB,mBACNC,EADM,KACAC,EADA,OAEQF,mBAAS,IAFjB,mBAEPG,EAFO,KAEDC,EAFC,OAGgBJ,mBAAS,IAHzB,mBAGGK,GAHH,aAIQL,mBAAS,IAJjB,mBAIPM,EAJO,KAIDC,EAJC,OAKUP,mBAAS,IALnB,mBAKPQ,EALO,KAKAC,EALA,OAMkBT,mBAAS,IAN3B,mBAMPU,EANO,KAMIC,EANJ,OAWaX,mBAAS,IAXtB,mBAWJY,EAXI,KAWEC,EAXF,KAmDb,OA9BCC,qBAAU,WACTC,IAGGC,IAAI,iCACJC,MACC,SAAAC,GACE,IAAMC,EAAcD,EAASjB,KAAKmB,MAC5BC,EAAOH,EAASjB,KAAKE,KACrBmB,EAAWJ,EAASjB,KAAKsB,SACzBC,EAAON,EAASjB,KAAKwB,MAAMC,QAAQvB,KACnCwB,EAAQT,EAASjB,KAAK2B,OACtBC,EAAYX,EAASjB,KAAK6B,eAAeC,eAC/CC,QAAQC,IAAId,GACZjB,EAAQiB,GACRf,EAAQiB,GACRd,EAAQiB,GACRf,EAASkB,GACThB,EAAakB,GACbxB,EAAYiB,MAGfY,OACC,SAACC,GACCH,QAAQC,IAAI,qBAAsBE,MAGrCC,SAAQ,kBAAMJ,QAAQC,IAAI,kBAC5B,CAAC/B,IAGN,6BAEA,yBAAKmC,MAAM,2BACT,yBAAKC,IAAI,8HAA8HC,UAAU,eAAeC,IAAI,MAAMC,MAAO,CAACC,OAAQ,WAC1L,yBAAKL,MAAM,iCACH,2BACEM,KAAK,OACLJ,UAAU,2BACVpC,KAAK,YAAYyC,YAAY,qDAC7BH,MAAO,CAAEI,MAAO,MAAOH,OAAQ,MAAQI,aAAa,IAEpDC,SAnDR,SAAoBC,GAClBnC,EAAQmC,EAAMC,OAAOC,QAmDfA,MAAOtC,IAGT,4BACE+B,KAAK,SACLJ,UAAU,0BACVY,MAAM,SACNC,QAxDR,SAAiBxC,KAyDT6B,MAAO,CAAEI,MAAO,MAAQH,OAAQ,KAAMI,aAAa,MALrD,KAUN,6BAAS,6BACT,wBAAIT,MAAM,2BAA2Bc,MAAM,QAAO,oCAAlD,aAA8EhD,GAC9E,wBAAIkC,MAAM,iBAAiBc,MAAM,QAAO,qCAAxC,aAAoElD,GACpE,wBAAIoC,MAAM,iBAAiBc,MAAM,QAAO,oCAAxC,aAAmE7C,GACnE,wBAAI+B,MAAM,iBAAiBc,MAAM,QAAO,wCAAxC,aAAuE3C,GACvE,wBAAI6B,MAAM,iBAAiBc,MAAM,QAAO,oDAAxC,aAAmFzC,O,MC3EnE2C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBhD,MAAK,SAAAiD,GACJA,EAAaC,gBAEdjC,OAAM,SAAAC,GACLH,QAAQG,MAAMA,EAAMiC,c","file":"static/js/main.04726288.chunk.js","sourcesContent":["import React,{ useState, useEffect } from 'react';\nimport axios from 'axios';\nimport \"../node_modules/bootstrap/dist/css/bootstrap.min.css\";\nimport './App.css';\n\nfunction App() {\n  const [data, setdata] = useState([]);\n  const[name, setName]=useState([]);\n  const[userName, setuserName]=useState([]);\n  const[rank, setRank]=useState([]);\n  const[skill, setSkill]=useState([]);\n  const[challenge, setChallenge]=useState([]);\n\n\n\n \n    const [text, setText] = useState(\"\");\n    function textChange(event) {\n      setText(event.target.value);\n    }\n    function addUser(text) {\n      const newUser = { text: text}\n      \n      }\n  \n   ////////////////////// Get tasks  //////////////////////\n   useEffect(() => {\n    axios\n      // .get('https://api.github.com/users/zainabalkaleefa') // github api\n      // .get(\"/api/v1/users/zainabalkaleefa/?access_key=i8J6XHhoBAdVH44bJ3-p\")\n      .get('/api/v1/users/zainabalkaleefa')\n      .then(//request is successful\n        response => {\n          const honorNumber = response.data.honor;\n          const Name = response.data.name;\n          const UserName = response.data.username;\n          const Rank = response.data.ranks.overall.name;\n          const Skill = response.data.skills;\n          const Challenge = response.data.codeChallenges.totalCompleted;\n          console.log(honorNumber);\n          setdata(honorNumber);\n          setName(Name);\n          setRank(Rank);\n          setSkill(Skill);\n          setChallenge(Challenge);\n          setuserName(UserName);\n\n        })\n      .catch(// an error\n        (error) => {\n          console.log('Error getting data', error)\n        }\n      )\n      .finally(() => console.log(\"I am done\"))\n  }, [setdata]);\n\n  return (\n<div>\n         \n<div class=\"card bg-dark text-white\">\n  <img src=\"https://pathrise-website-guide-wp.s3.us-west-1.amazonaws.com/guides/wp-content/uploads/2019/06/10173017/codewars-logo-1.png\" className=\"card-img img\" alt=\"...\" style={{height: '100vh'}}/>\n  <div class=\"card-img-overlay cardPosition\">\n          <input\n            type=\"text\"\n            className=\"form-control  inputField\"\n            name=\"text_name\" placeholder=\" &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp; CodeWars Username\"\n            style={{ width: \"30%\", height: \"10%\" , borderRadius:20}}\n            // aria-describedby=\"inputGroup-sizing-Default\"\n            onChange={textChange}\n            value={text} \n            />\n       \n          <button \n            type=\"button\"\n            className=\"btn btn-danger addField\"\n            align=\"center\"\n            onClick={addUser}\n            style={{ width: \"10%\" , height: \"8%\", borderRadius:100}}\n          > </button>\n     \n     \n    {/* <h1 class=\"card-title\" align =\"center\">{userName}</h1>  */}\n    <br></br><br></br>\n    <h3 class=\"card-text text firstText\" align=\"left\"><b>Name:</b>  &nbsp;&nbsp;{ name}</h3> \n    <h3 class=\"card-text text\" align=\"left\"><b>Honor:</b>  &nbsp;&nbsp;{data}</h3>\n    <h3 class=\"card-text text\" align=\"left\"><b>Rank:</b>  &nbsp;&nbsp;{rank}</h3>\n    <h3 class=\"card-text text\" align=\"left\"><b>Laguages:</b>  &nbsp;&nbsp;{skill}</h3>\n    <h3 class=\"card-text text\" align=\"left\"><b>Completed Challenges:</b>  &nbsp;&nbsp;{challenge}</h3>\n   \n   \n  </div>\n</div>\n</div>\n  );\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}